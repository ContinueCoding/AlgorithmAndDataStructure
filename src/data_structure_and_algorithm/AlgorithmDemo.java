package data_structure_and_algorithm;

/**
 * 【算法简介】
 *      算法是指解题方案的准确而完整的描述，是一系列解决问题的清晰指令，算法代表着用系统的方法描述解决问题的策略机制。
 *      对于同一个问题的解决，可能会存在着不同的算法，为了衡量一个算法的优劣，提出了空间复杂度与时间复杂度这两个概念。
 *
 * 【时间复杂度】
 *      一般情况下，算法中基本操作重复执行的次数是问题规模n的某个函数f(n)，算法的时间度量记为 ** T(n) = O(f(n)) **，
 *      它表示随问题规模n的增大，算法执行时间的增长率和f(n)的增长率相同，称作算法的渐近时间复杂度，简称时间复杂度。
 *      这里需要重点理解这个增长率。
 *
 *      举个例子，看下面3个代码：
 *
 *          1、{++x;}
 *
 *          2、for(i = 1; i <= n; i++)
 *              { ++x; }
 *
 *          3、for(j = 1; j <= n; j++)
 *              for(j = 1; j <= n; j++)
 *                  { ++x; }
 *
 *          上述含有 ++x 操作的语句的频度分别为1 、n 、n^2，
 *          假设问题的规模扩大了n倍，3个代码的增长率分别是1 、n 、n^2
 *          它们的时间复杂度分别为O(1)、O(n )、O(n^2)
 *
 * 【空间复杂度】
 *      空间复杂度是对一个算法在【运行过程中临时占用存储空间大小】的量度，记做S(n)=O(f(n))。
 *
 *      一个算法的优劣主要从算法的执行时间和所需要占用的存储空间两个方面衡量。
 *
 */
public class AlgorithmDemo {
}
