package beauty_of_data_structure_and_algorithm;

/**
 * 散列表 & 哈希算法
 *
 *  1 散列思想
 *      *数组的扩展：利用了数组可以支持按下标随机访问的特性！
 *      *散列值 = 哈希、散列函数（关键字）
 *
 *  2 散列函数 - 3点要求
 *      *散列函数计算的散列值是非负整数；
 *      *相同关键字的散列值相同；
 *      *不同关键字的散列值不同（散列冲突几乎不可能）；
 *
 *  3 常用散列冲突解决方法
 *      *开放地址法；
 *      *链表法；
 *
 *  4 如何设计散列函数
 *      *设计不能太复杂；
 *      *散列值尽可能随机 & 均匀分布；
 *
 *  5 散列表经常和链表结合使用（Java HashMap、LinkedHashMap等）
 *
 *
 *  6 哈希算法4点要求
 *      *从哈希值不能反向推导出原始数据；
 *      *对输入数据非常敏感 - 即使改变了一个bit，其哈希值也要不同；
 *      *散列冲突概率小；
 *      *执行效率高；
 *
 *  7 哈希算法常见应用：
 *      *安全加密 - MD5、SHA
 *      *唯一标识
 *      *数据校验
 *      *散列函数
 *      *负载均衡
 *      *数据分片
 *      *分布式存储
 *
 */
public class HashTableDemo {

    public static void main(String[] args) {

    }


}
